{"mappings":"0iBACAA,OAAOC,eAAeC,EAAS,aAAc,CACzCC,OAAO,IAEXD,EAAQE,QACR,SAAgCC,EAASC,GAChCA,IACDA,EAAMD,EAAQE,MAAM,IAExB,OAAOP,OAAOQ,OAAOR,OAAOS,iBAAiBJ,EAAS,CAClDC,IAAK,CACDH,MAAOH,OAAOQ,OAAOF,M,0GCVjC,IAAMI,EAAeC,SAASC,cAAc,kBACtCC,EAAeF,SAASG,eAAe,WACvCC,EAAeJ,SAASG,eAAe,iBACvCE,EAAaL,SAASG,eAAe,eACvCG,EAAW,CACbC,MAAO,GACPC,QAAS,IAYXT,EAAaU,iBAAiB,SAAS,EAAAC,EAAAC,WAVlB,WACnBL,EAAW,CACTC,MAAOR,EAAaa,SAASL,MAAMf,MACnCgB,QAAST,EAAaa,SAASJ,QAAQhB,OAEzCqB,QAAQC,IAAIR,GACZS,aAAaC,QAAQ,sBAAuBC,KAAKC,UAAUZ,G,GAIC,MAC9D,IAAMa,EAAuB,WACA,KAAvBf,EAAaZ,OAAqC,KAArBa,EAAWb,QAC1CU,EAAakB,UAAW,E,EAG5BhB,EAAaK,iBAAiB,QAASU,GACvCd,EAAWI,iBAAiB,QAASU,GACrC,IAAME,EAAcN,aAAaO,QAAQ,uBAuBzCvB,EAAaU,iBAAiB,UArBP,SAAAc,GAGrB,GAFAA,EAAMC,iBAGkC,KAAtCzB,EAAaa,SAASL,MAAMf,OACY,KAAxCO,EAAaa,SAASJ,QAAQhB,MAK9B,IACEqB,QAAQC,IAAK,cAAcR,GAC3BP,EAAa0B,QACbV,aAAaW,O,CACb,MAAOC,GACPd,QAAQC,IAAIa,EAAMC,MAClBf,QAAQC,IAAIa,EAAMnB,Q,MATpBqB,MAAKC,I,IAgCTC,OAAOtB,iBAAiB,QAhBP,WACf,IACE,IAAMuB,EAAmBf,KAAKgB,MAAMZ,GACpC,GAAyB,OAArBW,EACF,OAIAjC,EAAaa,SAASL,MAAMf,MAAQwC,EAAiBzB,MACrDR,EAAaa,SAASJ,QAAQhB,MAAQwC,EAAiBxB,O,CAEzD,MAAOmB,GACPd,QAAQC,IAAIa,EAAMC,MAClBf,QAAQC,IAAIa,EAAMnB,Q,KAetBN,EAAaO,iBAAiB,aAVC,WAEa,KAAxCV,EAAaa,SAASJ,QAAQhB,OACQ,KAAtCO,EAAaa,SAASL,MAAMf,MAE5BU,EAAakB,UAAW,EAExBlB,EAAakB,UAAW,C","sources":["node_modules/@swc/helpers/lib/_tagged_template_literal.js","src/js/03-feedback.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _taggedTemplateLiteral;\nfunction _taggedTemplateLiteral(strings, raw) {\n    if (!raw) {\n        raw = strings.slice(0);\n    }\n    return Object.freeze(Object.defineProperties(strings, {\n        raw: {\n            value: Object.freeze(raw)\n        }\n    }));\n}\n","import { throttle } from 'lodash';\nconst feedbackForm = document.querySelector('.feedback-form');\nconst submitButton = document.getElementById('amazing');\nconst messageInput = document.getElementById('message-input');\nconst emailInput = document.getElementById('email-input');\nlet userData = {\n  email: '',\n  message: '',\n};\nconst saveUserData = () => {\n  userData = {\n    email: feedbackForm.elements.email.value,\n    message: feedbackForm.elements.message.value,\n  };\n  console.log(userData);\n  localStorage.setItem('feedback-form-state', JSON.stringify(userData));\n};\n\n//zapisz w localstorage userData, konwersja na json\nfeedbackForm.addEventListener('input', throttle(saveUserData, 500)); //pobiera dane raz na pol sekundy, sprawdzilem\nconst disableButtonIfEmpty = () => {\n  if (messageInput.value !== '' && emailInput.value !== '') {\n    submitButton.disabled = false;\n  }\n};\nmessageInput.addEventListener('input', disableButtonIfEmpty);\nemailInput.addEventListener('input', disableButtonIfEmpty);\nconst getUserData = localStorage.getItem('feedback-form-state');\n\nconst submitFunction = event => {\n  event.preventDefault();\n\n  if (\n    feedbackForm.elements.email.value === '' ||\n    feedbackForm.elements.message.value === ''\n  ) {\n    alert`Please fill all the gaps!`;\n    return;\n  } else {\n    try {\n      console.log(`User data: `, userData);\n      feedbackForm.reset();\n      localStorage.clear();\n    } catch (error) {\n      console.log(error.name);\n      console.log(error.message);\n    }\n  }\n};\n\nfeedbackForm.addEventListener('submit', submitFunction);\n// load event\nconst loadPage = () => {\n  try {\n    const existingUserData = JSON.parse(getUserData);\n    if (existingUserData === null) {\n      return;\n    } //jeśli nie ma zapisanych danych to nie rob nic\n    //jeśli są dane to przywróć te wartości\n    else {\n      feedbackForm.elements.email.value = existingUserData.email;\n      feedbackForm.elements.message.value = existingUserData.message;\n    }\n  } catch (error) {\n    console.log(error.name);\n    console.log(error.message); //jesli error to zwroc jego nazwe i message\n  }\n};\nwindow.addEventListener('load', loadPage); //event listener na window a nie form, bo to ono jest przeładowywane\n\nconst magicHappensHereISwear = () => {\n  if (\n    feedbackForm.elements.message.value === '' ||\n    feedbackForm.elements.email.value === ''\n  ) {\n    submitButton.disabled = true;\n  } else {\n    submitButton.disabled = false;\n  }\n};\nsubmitButton.addEventListener('mouseover', magicHappensHereISwear);\n"],"names":["Object","defineProperty","$9150774b557bdbfe$exports","value","default","strings","raw","slice","freeze","defineProperties","$b00c40859be242c5$var$feedbackForm","document","querySelector","$b00c40859be242c5$var$submitButton","getElementById","$b00c40859be242c5$var$messageInput","$b00c40859be242c5$var$emailInput","$b00c40859be242c5$var$userData","email","message","addEventListener","$1WSnx","throttle","elements","console","log","localStorage","setItem","JSON","stringify","$b00c40859be242c5$var$disableButtonIfEmpty","disabled","$b00c40859be242c5$var$getUserData","getItem","event","preventDefault","reset","clear","error","name","alert","$b00c40859be242c5$var$_templateObject","window","existingUserData","parse"],"version":3,"file":"03-feedback.2e36bf6d.js.map"}