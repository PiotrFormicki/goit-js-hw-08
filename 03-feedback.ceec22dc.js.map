{"mappings":"0iBACAA,OAAOC,eAAeC,EAAS,aAAc,CACzCC,OAAO,IAEXD,EAAQE,QACR,SAAgCC,EAASC,GAChCA,IACDA,EAAMD,EAAQE,MAAM,IAExB,OAAOP,OAAOQ,OAAOR,OAAOS,iBAAiBJ,EAAS,CAClDC,IAAK,CACDH,MAAOH,OAAOQ,OAAOF,M,0GCGjC,IAAMI,EAAeC,SAASC,cAAc,kBACtCC,EAAeF,SAASG,eAAe,WACvCC,EAAeJ,SAASG,eAAe,iBACvCE,EAAaL,SAASG,eAAe,eACvCG,EAAW,CACbC,MAAO,GACPC,QAAS,IAUXT,EAAaU,iBAAiB,SAAS,EAAAC,EAAAC,WARlB,WACnBL,EAAW,CACTC,MAAOR,EAAaa,SAASL,MAAMf,MACnCgB,QAAST,EAAaa,SAASJ,QAAQhB,OAEzCqB,QAAQC,IAAIR,GACZS,aAAaC,QAAQ,sBAAuBC,KAAKC,UAAUZ,G,GAEC,MAG9D,IAAMa,EAAcJ,aAAaK,QAAQ,uBAsBzCrB,EAAaU,iBAAiB,UApBP,SAAAY,GAGrB,GAFAA,EAAMC,iBAGkC,KAAtCvB,EAAaa,SAASL,MAAMf,OACU,KAAtCO,EAAaa,SAASL,MAAMf,MAE5B+B,MAAKC,UAEL,IACE,IAAMC,EAAcR,KAAKS,MAAMP,GAC/BN,QAAQC,IAAK,cAAcW,GAC3BV,aAAaY,QACb5B,EAAa6B,O,CACb,MAAOC,GACPhB,QAAQC,IAAIe,EAAMC,MAClBjB,QAAQC,IAAIe,EAAMrB,Q,KAsBxBuB,OAAOtB,iBAAiB,QAhBP,WACf,IACE,IAAMuB,EAAmBf,KAAKS,MAAMP,GACpC,GAAyB,OAArBa,EACF,OAIAjC,EAAaa,SAASL,MAAMf,MAAQwC,EAAiBzB,MACrDR,EAAaa,SAASJ,QAAQhB,MAAQwC,EAAiBxB,O,CAEzD,MAAOqB,GACPhB,QAAQC,IAAIe,EAAMC,MAClBjB,QAAQC,IAAIe,EAAMrB,Q,KAKrB,IAYKyB,EAAgB,WACpB/B,EAAagC,MAAMC,QAAU,O,EAE/B/B,EAAaK,iBAAiB,YAAawB,GAC3C5B,EAAWI,iBAAiB,YAAawB,GACzC/B,EAAaO,iBAAiB,aAjBC,WAEa,KAAxCV,EAAaa,SAASJ,QAAQhB,OACQ,KAAtCO,EAAaa,SAASL,MAAMf,MAE5BU,EAAagC,MAAMC,QAAU,OAE7BjC,EAAagC,MAAMC,QAAU,O","sources":["node_modules/@swc/helpers/lib/_tagged_template_literal.js","src/js/03-feedback.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _taggedTemplateLiteral;\nfunction _taggedTemplateLiteral(strings, raw) {\n    if (!raw) {\n        raw = strings.slice(0);\n    }\n    return Object.freeze(Object.defineProperties(strings, {\n        raw: {\n            value: Object.freeze(raw)\n        }\n    }));\n}\n","//Rozklad jazdy:\n//import throttle\n//zadeklarowac wszystko co trzeba\n//stworzyc obiekt zawierajacy wszystkie dane tj. email, message\n//funkcja ktora zapisuje wszystko w formie, wykonsolować ją, json stringify i setItem na local storage\n//funkcja do submit event\n//jakiś if gdyby cymbał zostawił puste pola, a jesli git to wyczyscic elementy forma\n//catch error i konsol log dla .name i .message\n//przeładuj strone i pobierz wartosci z local storage\n//te wartosci .parse\n//jesli zwracają null to return\n//a jesli git to email.value=parsowaneInformacje.email/message\n//dać throttle do eventlistenera od zapisywania inputa\nimport { throttle } from 'lodash';\nconst feedbackForm = document.querySelector('.feedback-form');\nconst submitButton = document.getElementById('amazing');\nconst messageInput = document.getElementById('message-input');\nconst emailInput = document.getElementById('email-input');\nlet userData = {\n  email: '',\n  message: '',\n};\nconst saveUserData = () => {\n  userData = {\n    email: feedbackForm.elements.email.value,\n    message: feedbackForm.elements.message.value,\n  };\n  console.log(userData);\n  localStorage.setItem('feedback-form-state', JSON.stringify(userData));\n}; //zapisz w localstorage userData, konwersja na json\nfeedbackForm.addEventListener('input', throttle(saveUserData, 500)); //pobiera dane raz na pol sekundy, sprawdzilem\n//teraz submit\n\nconst getUserData = localStorage.getItem('feedback-form-state');\n\nconst submitFunction = event => {\n  event.preventDefault();\n\n  if (\n    feedbackForm.elements.email.value === '' ||\n    feedbackForm.elements.email.value === ''\n  ) {\n    alert`Please fill all the gaps!`;\n  } else {\n    try {\n      const currentData = JSON.parse(getUserData);\n      console.log(`User data: `, currentData);\n      localStorage.clear();\n      feedbackForm.reset();\n    } catch (error) {\n      console.log(error.name);\n      console.log(error.message);\n    }\n  }\n};\nfeedbackForm.addEventListener('submit', submitFunction);\n// load event\nconst loadPage = () => {\n  try {\n    const existingUserData = JSON.parse(getUserData);\n    if (existingUserData === null) {\n      return;\n    } //jeśli nie ma zapisanych danych to nie rob nic\n    //jeśli są dane to przywróć te wartości\n    else {\n      feedbackForm.elements.email.value = existingUserData.email;\n      feedbackForm.elements.message.value = existingUserData.message;\n    }\n  } catch (error) {\n    console.log(error.name);\n    console.log(error.message); //jesli error to zwroc jego nazwe i message\n  }\n};\nwindow.addEventListener('load', loadPage); //event listener na window a nie form, bo to ono jest przeładowywane\n\nconst magicHappensHereISwear = () => {\n  if (\n    feedbackForm.elements.message.value === '' ||\n    feedbackForm.elements.email.value === ''\n  ) {\n    submitButton.style.display = 'none';\n  } else {\n    submitButton.style.display = 'block';\n  }\n}; //dla submit\n\n//dla message oraz email\nconst resetMagicPls = () => {\n  submitButton.style.display = 'block';\n};\nmessageInput.addEventListener('mouseover', resetMagicPls);\nemailInput.addEventListener('mouseover', resetMagicPls);\nsubmitButton.addEventListener('mouseover', magicHappensHereISwear);\n//teraz na pewno nie da się submitować przy obu pustych polach :D\n"],"names":["Object","defineProperty","$9150774b557bdbfe$exports","value","default","strings","raw","slice","freeze","defineProperties","$b00c40859be242c5$var$feedbackForm","document","querySelector","$b00c40859be242c5$var$submitButton","getElementById","$b00c40859be242c5$var$messageInput","$b00c40859be242c5$var$emailInput","$b00c40859be242c5$var$userData","email","message","addEventListener","$1WSnx","throttle","elements","console","log","localStorage","setItem","JSON","stringify","$b00c40859be242c5$var$getUserData","getItem","event","preventDefault","alert","$b00c40859be242c5$var$_templateObject","currentData","parse","clear","reset","error","name","window","existingUserData","$b00c40859be242c5$var$resetMagicPls","style","display"],"version":3,"file":"03-feedback.ceec22dc.js.map"}